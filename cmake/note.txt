cmake不区分大小写，建议命令使用大写！
CMAKE_MINIMUM_REQUIRED(VERSION 2.8) 
设置所写的CMakeLists.txt文件，至少需要的cmake版本
PROJECT(HELLO) 
为本次构建起一个名字，这不是最后exe的名字

ADD_EXECUTABLE(hi main.cpp) 
添加可执行文件，第一个参数是可执行文件的名字，第二个参数是源文件（暂时只考虑少量源文件，这样可以依次写在后面，后面有命令来批量加入源文件）

cmake .. 
该命令中..，意味着CMakeLists.txt在上一层目录，这样构建保证了所有构建的文件全部在build文件夹中，方便使用版本控制软件如git进行版本控制，只需要忽略build就可以了






INCLUDE指令
用来载入CMakeLists.txt文件，也用于载入预定义的cmake模块.
INCLUDE(file1 [OPTIONAL])
INCLUDE(module [OPTIONAL])
OPTIONAL参数的作用是文件不存在也不会产生错误。你可以指定载入一个文件，
如果定义的是一个模块，那么将在CMAKE_MODULE_PATH中搜索这个模块并载入。

cmake指令会自动创建两个变量：
<projectname>_BINARY_DIR(二进制文件保存路径)    
<projectname>_SOURCE_DIR（源代码路径）

使用$ENV{NAME}指令就可以调用系统的环境变量
CMAKE_MAJOR_VERSION，CMAKE主版本号，比如2.4.6中的2
CMAKE_MINOR_VERSION，CMAKE次版本号，比如2.4.6中的4
CMAKE_PATCH_VERSION，CMAKE补丁等级，比如2.4.6 中的6
CMAKE_SYSTEM，系统名称，比如Linux-2.6.22
CMAKE_SYSTEM_NAME，不包含版本的系统名，比如Linux
CMAKE_SYSTEM_VERSION，系统版本，比如2.6.22
CMAKE_SYSTEM_PROCESSOR，处理器名称，比如i686.
UNIX，在所有的类UNIX平台为TRUE，包括OS X和cygwi
WIN32，在所有的win32平台为TRUE，包括cygwi

ADD_DEFINITIONS(-DENABLE_DEBUG-DABC)，定义宏

定义target依赖的其他target，确保在编译本target之前，其他的target已经被构建。
ADD_DEPENDENCIES(target-name depend-target1depend-target2 ...)

让一个顶层目标依赖于其他的顶层目标。一个顶层目标是由命令ADD_EXECUTABLE，ADD_LIBRARY，或者ADD_CUSTOM_TARGET产生的目标。为这些命令的输出引入依赖性可以保证某个目标在其他的目标之前被构建。查看ADD_CUSTOM_TARGET和ADD_CUSTOM_COMMAND命令的DEPENDS选项，可以了解如何根据自定义规则引入文件级的依赖性。查看SET_SOURCE_FILES_PROPERTIES命令的OBJECT_DEPENDS选项，可以了解如何为目标文件引入文件级的依赖性。

ADD_TEST(testname Exenamearg1 arg2 ...)
如果没有在同一个CMakeLists.txt中打开ENABLE_TESTING()指令，任何ADD_TEST都是无效的。
ADD_TEST(mytest${PROJECT_BINARY_DIR}/bin/main)
ENABLE_TESTING()
生成Makefile后，就可以运行make test来执行测试了。
AUX_SOURCE_DIRECTORY(dirVARIABLE)
作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中
AUX_SOURCE_DIRECTORY(. SRC_LIST)
ADD_EXECUTABLE(main ${SRC_LIST})



















